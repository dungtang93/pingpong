{"title":"Basic structure","slug":"basic-structure","html":"\n<p>Two main parts:</p>\n<ul>\n\t<li>The <b>game</b> part (PIXI & Matter)</li>\n\t<li>The <b>other stuff</b> part (Sapper)</li>\n</ul>\n\n<p>The game includes: <code>game.ts</code>,<code>game_config.ts</code> & the bunch of <i>game objects</i> inside <code>/src/game</code> folder</p>\n<ul>\n\t<li>\n\t\t<details>\n\t\t\t<summary><code>game.ts</code> specifies the basic layout: a canvas container & the <i>game objects</i></summary>\n\t\t\t<pre><code>\nnew Container({\n\tview: canvas, // the canvas element to draw the game on\n\tbuilder: (app, { topId, bottomId }) => [\n\t\tnew Background(app),\n\t\tnew Ball({ app: app, name: 'ball', onCollisionCallback: (otherBody) => ... }),\n\t\tnew Paddle({ app: app, name: 'paddle-top' }),\n\t\tnew Paddle({ app: app, name: 'paddle-bottom' })\n\t]\n})\n\t\t\t</code></pre>\n\t\t</details>\n\t</li>\n\n\t<li>\n\t\t<code>game_config.ts</code> contains defaults for canvas width, height & physics stuff such as friction, inertia...\n\t</li>\n\n\t<li>\n\t\t<details>\n\t\t\t<summary><i>Game objects</i> should extends <code>src/game/app/GameObject.ts</code> parent class & be included in <code>game.ts</code></summary>\n\t\t\t<pre><code>\nclass Ball extends GameObject // basic\nclass Ball extends Materialized(GameObject) // \"materialize\" it and include in physics world, trigger onCollisionCallback\nclass Ball extends Interactive(Materialized(GameObject)) // subscribe to key press events\n\t\t\t</code></pre>\n\t\t</details>\n\t</li>\n\n\t<li>\n\t\tThere are two game loops (exposed as <code>update(_delta: time)</code> & <code>fixedUpdaste(_delta: time)</code>)\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<code>update()</code> does not have FPS cap, there more refresh rate your monitor have, the lower <code>_delta</code> goes\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<code>fixedUpdate()</code> have FPS cap of <i>60FPS</i>, <code>_delta</code> will stay closely to 1.0 as it can; you should put logics & physics-related codes inside this loop (this is to prevents\n\t\t\t\t\thaving objects on 144Hz monitor move more quickly than a 60Hz one)\n\t\t\t\t</li>\n\t\t\t</ul>\n\t</li>\n\n\t<li>\n\t\t<details>\n\t\t\t<summary>Some already-made interfaces that a <i>Game object</i> can implements to simplify codes</summary>\n\t\t\t<pre><code>\n// A game object can implement \"Shappable\" interface & \"requiredGraphics\" method,\n// it requires a PIXI Graphics instance to draw onto the canvas stage\nclass Ball extends GameObject implements Shapeable {\n  requireGraphics(): Graphics {\n    const [x, y, radius] = [100, 100, 6]\n    //draw a circle\n    return new Graphics().beginFill(0xFFFFFF).drawCircle(x, y, radius).endFill()\n  }\n}\n\t\t\t</code></pre>\n\t\t</details>\n\t</li>\n</ul>\n\n<p>The other stuffs (such as this block of texts) are handled by Svelte</p>\n\n<p>To bridge events generated from canvas to Svelte components, we can use <code>EventEmitter</code></p>\n\t\t"}